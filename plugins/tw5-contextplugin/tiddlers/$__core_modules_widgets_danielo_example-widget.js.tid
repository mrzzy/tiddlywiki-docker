created: 20140529124928010
creator: danielo
modified: 20140529125311265
modifier: danielo
module-type: widget
tags: plugin
title: $:/core/modules/widgets/danielo/example-widget.js
type: application/javascript

/*\
title: $:/core/modules/widgets/danielo/example.js
type: application/javascript
module-type: widget

Edit-text widget


\*/
(function(){

/*jslint node: true, browser: true */
/*global $tw: false */
"use strict";
  
var Widget = require("$:/core/modules/widgets/widget.js").widget;
var exampleWidget = function(parseTreeNode,options) {
	this.initialise(parseTreeNode,options);
};

/*
Inherit from the base widget class
*/
exampleWidget.prototype = new Widget();

/*
Render this widget into the DOM
*/
exampleWidget.prototype.render = function(parent,nextSibling) {
	// Save the parent dom node
	this.parentDomNode = parent;
	// Compute our attributes
	this.computeAttributes();
	// Execute our logic
	this.execute();
	// Create our elements
	var domNode = this.document.createElement("div");


	/// Insert element
	parent.insertBefore(domNode,nextSibling);
	this.renderChildren(domNode,null);
	this.domNodes.push(domNode);
};

/*
Compute the internal state of the widget
*/
exampleWidget.prototype.execute = function() {
	// Get the parameters from the attributes
	this.term = this.getAttribute("term",this.getAttribute("searchTerm"));
	console.log(this.term);
	/*
	this.selectField = this.getAttribute("field");
	this.selectLabel = this.getAttribute("label");
	this.selectValue = this.getAttribute("value");
	this.selectLVSep = this.getAttribute("labelvalue");
	this.selectVLSep = this.getAttribute("valuelabel");
	this.selectedIndex = null;*/

	this.makeChildWidgets();
};


/*
Selectively refreshes the widget if needed. Returns true if the widget or any of its children needed re-rendering
*/
exampleWidget.prototype.refresh = function(changedTiddlers) {
	var changedAttributes = this.computeAttributes();
	if(changedAttributes.tiddler || changedAttributes.field || changedAttributes.filter || changedAttributes["class"]) {
		this.refreshSelf();
		return true;
	}
    return this.refreshChildren(changedTiddlers);
};

exports.example = exampleWidget;

})();